test2 <- sqldf("select pwgtp1 from acs where AGEP < 50")
test2
head(test2)
head(test1)
rm(list=ls())
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL, destfile = "./data/asc.csv", method = "auto")
dateDownloaded <- date()
asc <- read.csv("./data/asc.csv")
head(asc)
test1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
test1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
test1 <- sqldf("select pwgtp1 from asc where AGEP < 50")
test1[1:100]
test1[1:100,]
q3 <- unique(asc$AGEP)
q3_1 <- sqldf("select unique AGEP from acs")
q3_1 <- sqldf("select unique AGEP from asc")
unique(acs$AGEP)
unique(asc$AGEP)
q3 <- sqldf("select distinct AGEP from acs")
q3 <- sqldf("select distinct AGEP from asc")
q3
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
htmlCode
close(con)
c(nchar(htmlCode[10]))
c(nchar(htmlCode[20]))
c(nchar(htmlCode[30]))
c(nchar(htmlCode[100]))
rm(list = ls())
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURL, destfile = "./data/q5_data.for", method = "auto")
list.files("./data")
dateDownloaded <- date()
q5_df <- read.fwf(file = "./data/q5_data.for", widths = c(15,4,1,3,5,4), header = FALSE, sep = "\t", skip = 4)
head(q5_df)
sum(q5_df$V4)
q5_df
head(q5_df)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
x <- X[sample(1:5),]; X$var2[c(1,3)] = NA
rm(x)
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
x
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= 3 $ X$var3 > 11),]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1, decreasing = T)
sort(X$var2,na.last = T)
X[order(X$var1),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
getwd()
if(!file.exists("./data")){dir.create("./data")}
fileURL <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "./data/restaurants.csv", method = "auto")
fileURL <- "http://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "./data/restaurants.csv", method = "auto")
restData <- read.csv("./data/restaurants.csv")
head(restData)
head(restData,n=3)
tail(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm = T)
quantile(restData$councilDistrict,probs = c(0.5,0.75,0.9))
table(restData$zipCode,useNA = "ifany")
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode >0)
is.na(restData)
colSums(is.na(restData))
all(colSums(is.na(restData))=0)
all(colSums(is.na(restData)=0))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212","21213"))
restData[restData$zipCode %in% c("21212","21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit,data = DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data = warpbreaks)
xt
ftable(xt)
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units = "Mb")
s1 <- seq(1,10,by=2); s1
s2 <- seq(1,10,length = 3); s2
x <- c(1,3,8,25,100); seq(along = x)
restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong,restData$zipCode < 0)
restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups,restData$zipCode)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes","no"),size = 20,replace=T)
yesnofac <- factor(yesno, levels = c("yes","no"))
relevel(yesnofac,ref = "yes")
as.numeric(yesnofac)
yesno <- sample(c("yes","no"),size = 10,replace=T)
yesnofac <- factor(yesno, levels = c("yes","no"))
relevel(yesnofac,ref = "yes")
as.numeric(yesnofac)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))
table(restData2$zipGroups)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
head(carMelt)
rm(list = ls())
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
head(carMelt,n=3)
tail(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
unlist(sprCount)
sapply(spIns,sum)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
ddply(InsectSprays,.(spray),plyr::summarize,sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN = sum))
spraySums <- ddply(InsectSprays,.(spray),plyr::summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums)
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library("plyr", lib.loc="C:/Program Files/R/R-3.2.3/library")
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
install.packages("dplyr")
library(dplyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),plyr::summarize,sum=ave(count,FUN=sum))
head(spraySums)
rm(list = ls())
chicago <- readRDS("chicago.rds")
nyairquality <- airquality
dim(nyairquality)
str(nyairquality)
names(nyairquality)
head(select(ozone, temp:day))
head(select(nyairquality, temp:day))
head(select(nyairquality, Temp:Day))
head(select(nyairquality, -(Temp:Day)))
ny.f <- filter(nyairquality, Temp > 60)
ny.f
ny.f <- filter(nyairquality, Temp > 75)
ny.f <- filter(nyairquality, Temp > 80)
head(ny.f)
ny.f <- filter(nyairquality, Temp > 80, Month == 6)
head(ny.f)
ny <- arrange(ny.f, Temp)
head(ny)
tail(ny)
ny <- arrange(ny.f, desc(Temp))
ny
ny <- rename(nyairquality, Mon = Month)
ny
ny <- mutate(nyairquality, meanOzone = mean(Ozone, na.rm = TRUE))
head(ny)
ny.f
newyork <- mutate(ny, tempcat = factor(1 * (Temp > 80), labels = c("cold","hot")) + )
newyork <- mutate(ny, tempcat = factor(1 * (Temp > 80), labels = c("cold","hot")))
hotcold <- group_by(newyork, tempcat)
hotcold
head(newyork, n=10)
summarize(hotcold, meanOzone = mean(Ozone), maxSolar = max(Solar.R), medTemp = median(Temp))
summarize(hotcold, meanTemp = mean(Temp), maxSolar = max(Solar.R), medTemp = median(Temp))
summarize(hotcold, meanTemp = mean(Temp), maxWind = max(Wind), medOzone = median(Ozone))
nyairquality
View(nyairquality)
rm(list = ls())
if(!file.exists("./data")){dir.create("./data")}
fileURL1 = "https://dl.dropboxusercontent.com/u/"
fileURL1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileURL2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileURL1, destfile = "./data/reviews.csv")
download.file(fileURL2, destfile = "./data/solutions.csv")
download.file(fileURL1, destfile = "./data/reviews.csv", method = "auto")
download.file(fileURL2, destfile = "./data/solutions.csv", method = "auto")
reviews = read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
names(solutions)
mergedData = merge(reviews,solutions, by.x="solution_id", by.y="id",all=T)
head(mergedData)
intersect(names(solutions),names(reviews))
mergedData2 = merge(reviews,solutions, all=T)
head(mergedData2)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)
arrange(join_all(dfList))
arrange(join_all(dfList), id)
swirl()
library(swirl)
rm(list = ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linus_gnu")
filter(cran, size > 100500, r_os == "linus_gnu")
info()
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
?arrange
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran2
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran = tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
?select
?chain
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students1, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c"sex","class")
separate(res, col = sex_class, sep = c"sex","class")
separate(res, col = sex_class, sep = c("sex","class"))
separate(res, col = sex_class, into = c("sex","class"))
submit()
students3
submit()
submit()
submit()
reset*
reset()
View(result2)
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
submit()
reset()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
fialed
failed
?mutate
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
?group_by
submit()
rm(list = ls())
fileURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile = "./data/IDhousing.csv")
IDhousing <- read.csv("./data/IDhousing.csv")
agriculturLogical <- IDhousing[(IDhousing$ACR == 3 & IDhousing$AGS == 6),]
which(agriculturLogical)
?which
which(agriculturLogical = T)
agricultureLogical <- IDhousing$ACR == 3 & IDhousing$AGS == 6
head(which(agricultureLogical))
library(jpeg)
?jpeg
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL, destfile = "./data/jpegJeff")
download.file(fileURL, destfile = "./data/jpegJeff", mode = "wb", method = "auto")
jpegJeff <- readJPEG("./data/jpegJeff", native = TRUE)
quantile(jpegJeff, probs = c(0.3,0.8))
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL, destfile = "./data/gdp.csv", method = "auto")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL, destfile = "./data/gdpeducation.csv", method = "auto")
gdp <- read.csv("./data/gdp.csv")
gdpeducation <- read.csv("./data/gdpeducation.csv")
head(gdp)
head(gdpeducation)
gdp = fread("./data/gdp.csv",skip=4,nrows=190,select = c(1,2,4,5), col.names=c("CountryCode","Rank","Economy","Total"))
?fread
library(dplyr)
gdp = fread("./data/gdp.csv",skip=4,nrows=190,select = c(1,2,4,5), col.names=c("CountryCode","Rank","Economy","Total"))
library(data.table)
install.packages("data.table")
library(data.table)
gdp = fread("./data/gdp.csv",skip=4,nrows=190,select = c(1,2,4,5), col.names=c("CountryCode","Rank","Economy","Total"))
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL1, destfile = "./data/gdp.csv", mode = "wb", method = "auto")
download.file(fileURL2, destfile = "./data/edu/csv", mode = "wb", method = "auto")
download.file(fileURL2, destfile = "./data/edu.csv", mode = "wb", method = "auto")
gdp = fread("./data/gdp.csv", skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode","Rank","Economy","Total"))
edu = fread("./data/edu.csv")
merge = merge(gdp,edu, by = "CountryCode")
nrow(merge)
arrange(merge, desc(Rank))[13,Economy]
tapply(merge$Rank, merge$`Income Group`, mean)
merge$RankGroups <- cut2(merge$Rank, g=5)
table(merge$RankGroups, merge$`Income Group`)
install.packages("caTools")
setwd("~/Udemy/Machine Learning A-Z/Datafiles/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
rm(split)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = .7)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(test_set)
regressor = lm(formula = Salary ~ YearsExperience, )
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.3/library")
detach("package:ggplot2", unload=TRUE)
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(X = training_set$YearsExperience, y = training_set$Salary),
color = 'red') +
geom_line(aes(X = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = y_pred),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
